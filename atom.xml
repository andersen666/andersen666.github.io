<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>andersen</title>
  <icon>https://www.gravatar.com/avatar/a16d7826b8254b112c838efeadfe2f13</icon>
  <subtitle>记录与学习</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://andersen666.github.io.git/"/>
  <updated>2020-04-23T01:40:59.684Z</updated>
  <id>https://andersen666.github.io.git/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>myNewTestBlog1</title>
    <link href="https://andersen666.github.io.git/2020/04/23/myNewTestBlog1/"/>
    <id>https://andersen666.github.io.git/2020/04/23/myNewTestBlog1/</id>
    <published>2020-04-23T01:40:59.000Z</published>
    <updated>2020-04-23T01:40:59.684Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://andersen666.github.io.git/2020/04/23/hello-world/"/>
    <id>https://andersen666.github.io.git/2020/04/23/hello-world/</id>
    <published>2020-04-23T01:02:35.462Z</published>
    <updated>2020-04-23T01:34:03.522Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="hello-hexo"><a href="#hello-hexo" class="headerlink" title="hello hexo"></a>hello hexo</h2><ol><li><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1></li><li><p>xx</p></li></ol><h4 id="这是4级标题"><a href="#这是4级标题" class="headerlink" title="这是4级标题"></a>这是4级标题</h4><h5 id="这是5级标题"><a href="#这是5级标题" class="headerlink" title="这是5级标题"></a>这是5级标题</h5><p><strong>字体加粗</strong></p><p><em>字体斜</em></p><ul><li>test1</li><li>test2</li><li>test3</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  * <span class="keyword">from</span>  <span class="keyword">test</span></span><br></pre></td></tr></table></figure><p><img src alt="loading"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="博客相关" scheme="https://andersen666.github.io.git/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
  <entry>
    <title>mongoDB</title>
    <link href="https://andersen666.github.io.git/2019/10/10/mongoDB/"/>
    <id>https://andersen666.github.io.git/2019/10/10/mongoDB/</id>
    <published>2019-10-10T09:44:03.000Z</published>
    <updated>2019-10-15T07:54:24.752Z</updated>
    
    <content type="html"><![CDATA[<h5 id="mongoDB概念"><a href="#mongoDB概念" class="headerlink" title="mongoDB概念"></a>mongoDB概念</h5><p><strong>mongoDB 是一个基于分布式文件存储的数据库**</strong>一般用于存储 程序产生的数据，例如用户名，密码，评论，订单等。可以理解为下图。</p><p><img src="http://tva2.sinaimg.cn/large/c44b3fe4gy1g7t8drfn5bj20jb0hxjtz.jpg" alt="mongoDB"></p><p>三大概念：</p><ul><li>数据库</li><li>集合</li><li>文档（最小单位）</li></ul><p>数据库存放集合，类似于表，集合存放文档。</p><p>打开数据库服务，连接数据库</p><p>CMD下打开目录 </p><p>D:</p><p>cd bin</p><p>运行</p><p>mongod</p><p>再次打开CMD下操作，或者 运用图像化界面（navicat）</p><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><h6 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h6><p>//使用数据库，没有该数据库自动创建<br>use test</p><p>//查当前数据库<br>show dbs</p><p>//删除当前数据库<br>db.dropDatabase()</p><h6 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h6><p>db.TestCollection</p><p>//当第一个文档插入时，集合就会被创建并包含该文档<br>db.TestCollection.insert({‘a’:2})</p><p>//查当前的集合<br>show collections</p><p>//查当前集合所包含的文档<br>db.TestCollection.find()</p><h6 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h6><p>//插入一个<br>        db.TestCollection.insert({“name”:”xushang”,”age”:”19”})</p><p>//插入多个，采用数组<br>        db.TestCollection.insert</p><p>([</p><p>{“name”:”xushang”,”age”:”18”},</p><p>{“name”:”xushang1”,”age”:”19”},<br>        {“name”:”xushang2”,”age”:”20”}</p><p>])</p><p>//删除一个</p><p>db.TestCollection.deleteOne({“a”:1})</p><p>//删除所有<br>        db.TestCollection.deleteMany({})</p><p>//查 所有</p><p>db.TestCollection.find()</p><p>//查其中符合的一个</p><p>db.TestCollection.find({“name”:”xushang”})</p><p>//  ,相当于  and<br>       db.TestCollection.find({“name”:”xushang”,”age”:”19”})</p><p>//局部更改<br>        db.testcoll.update({“name”:”andersens”},{“$set”:{“sex”:”malexxxx”}})</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;mongoDB概念&quot;&gt;&lt;a href=&quot;#mongoDB概念&quot; class=&quot;headerlink&quot; title=&quot;mongoDB概念&quot;&gt;&lt;/a&gt;mongoDB概念&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;mongoDB 是一个基于分布式文件存储的数据库**&lt;/strong
      
    
    </summary>
    
      <category term="数据库" scheme="https://andersen666.github.io.git/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>C_Sharp笔记</title>
    <link href="https://andersen666.github.io.git/2019/08/31/C-Sharp%E7%AC%94%E8%AE%B0/"/>
    <id>https://andersen666.github.io.git/2019/08/31/C-Sharp笔记/</id>
    <published>2019-08-30T16:22:04.000Z</published>
    <updated>2019-09-13T09:06:38.802Z</updated>
    
    <content type="html"><![CDATA[<h5 id="类（class）与名称空间-namespace"><a href="#类（class）与名称空间-namespace" class="headerlink" title="类（class）与名称空间(namespace)"></a>类（class）与名称空间(namespace)</h5><p><em>先举例</em>：</p><p><strong>类库</strong>：图书馆</p><p><strong>命名空间</strong>：书架（计算机与科学书架（库））</p><p><strong>类</strong>： 书</p><p><strong>对象</strong>：具体的某本书</p><p>在C#种必须首先引用命名空间，相当于我要找书，先要知道书架在哪。</p><p>在代码中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命名空间 .类.方法       </span></span><br><span class="line">  System. Console.WriteLine(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure><p>但是因为每次都这么使用会显得特别麻烦，如下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System. Console.WriteLine(<span class="string">"hello world"</span>);</span><br><span class="line">System. Console.WriteLine(<span class="string">"hello world1"</span>);</span><br><span class="line">System. Console.WriteLine(<span class="string">"hello world2"</span>);</span><br><span class="line">System. Console.WriteLine(<span class="string">"hello world3"</span>);</span><br><span class="line">System. Console.WriteLine(<span class="string">"hello world4"</span>);</span><br></pre></td></tr></table></figure><p>所以我们会引用命名空间,这样会更简练。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">.....代码......</span><br><span class="line">Console.WriteLine(&quot;hello world&quot;);</span><br></pre></td></tr></table></figure><p>类和命名空间放到类库（物理基础）又称动态链接库。</p><p>我们可以这么理解类库（类的仓库），假如我们知道了某本书在哪个书架，但是连图书馆都没有，知道书架都没用，所有举例来说图书馆就是类库。（.dll）。</p><p><strong>那么动态链接库怎么创建</strong>，<strong>怎么引用呢</strong>？</p><p>我们先来引用看下，分为<strong>黑盒引用</strong>，<strong>白盒引用</strong></p><p>我们首先新建一个控制台项目：</p><p><em>黑盒引用就是无源代码引用</em>我们此时只有.dll文件</p><p>右键引用。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68rmh75f5j211v0irjsa.jpg" alt="引用"></p><p>此时我们在项目内使用该类库的里面的类，我们可以通过双击该类库查看里面的类。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68rrmn88aj20jl0dvabe.jpg" alt="引用类"></p><p>我们可以看到Tools命名空间内含有一个cal的类。我们再在代码中使用该类，先引用该命名空间</p><p>using Tools</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68rupppx4j20qf091glm.jpg" alt="引用类计算"></p><p>我们可以观察到里面有两个方法，Add和sub,分别是double类型，并且返回double类型，。</p><p>可以计算并且调试。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68ryz3flfj20sh0clwep.jpg" alt="计算调试。"></p><p>我们同样使用sub方法（减法）</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68s3p3f9kj20su0c2aa8.jpg" alt="计算调试减"></p><p>我们会发现一个问题，结果应该是0.1，但是却是-9.9,这时候我们就可以看出黑盒引用的弊端。就是发现了问题，但是并不知道源码无法调试。所有就引出了白盒引用。</p><p><em>白盒引用就是有源代码引用</em></p><p>我们得到了该类库的源码。我们需要将该项目引用到自己的解决方案中。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68sw1ufgoj20v80i2jt3.jpg" alt="白盒项目"></p><p>这样我们就可以看到</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68sxkbvylj20az0ec3z3.jpg" alt="项目添加类"></p><p>这样我们再自己项目中引用该项目，即可</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68syycmfhj215r0kuwgf.jpg" alt="白盒引用"></p><p>这样我们再重新运行减法运算，调试以下。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g68t2hoa1oj20tk0f6dgx.jpg" alt="白盒断点调试"></p><p>从上面就能看出，sub方法再a-b-10导致，我们也可以修改</p><h5 id="类，对象，成员"><a href="#类，对象，成员" class="headerlink" title="类，对象，成员"></a>类，对象，成员</h5><p>对象也叫实例，是类经过“实例化”后得到的内存中的实体。</p><ul><li>“飞机”与“一架飞机”有何区别？      天上有（一架）飞机 —— 必须是实例飞，概念不能飞</li><li>有些类是不能实例化的，比如“数学”（Math      class），我们不能说“一个数学</li></ul><p>使用new 操作符创建类的实例</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Form()</span><br></pre></td></tr></table></figure><ul><li>引用变量与实例的关系</li><li>孩子与气球</li><li>气球不一定有孩子牵着</li><li>多个孩子可以使用各自的绳子牵着同一个气球，也可以都通过一根绳子（ref）牵着各自的气球</li></ul><p>new Form()相当于气球，需要孩子来牵着，否则就会进入垃圾回收站。所以正常来看就是只是实例化了。但是需要引用变量来接收，</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Form f = <span class="keyword">new</span> Form();</span><br></pre></td></tr></table></figure><p><strong>类的三大成员 属性、方法、事件</strong></p><ul><li><p>属性      Property</p><p>存储数据，组合起来表示类或对象当前的状态</p></li><li><p>方法      Method</p><p>由 C   语言中的函数（function）进化而来，表示类或对象“能做什么”，工作中      90% 的时间是与方法打交道，因为它是“真正做事”、“构成逻辑”的成员</p></li><li><p>事件      Event</p><p>类或对象通知其它类或对象的机制，为      C# 所特有（Java 通过其它办法实现这个机制，善用事件机制非常重要（切勿滥用）</p></li></ul><h5 id="详解类型、变量与对象"><a href="#详解类型、变量与对象" class="headerlink" title="详解类型、变量与对象"></a>详解类型、变量与对象</h5><ul><li>Type 又名数据类型（Data Type）</li><li><ol><li>A data type is a homogeneous collection of values, effectively presented, equipped with a set of operations which manipulate these values.</li></ol></li><li><ol><li>是数据在内存中存储时的“型号”</li></ol></li><li><ul><li>小内存容纳大尺寸数据会丢失精度、发生错误</li></ul></li><li><ul><li>大内存容纳小尺寸数据会导致浪费</li></ul></li><li><ul><li><strong>编程语言的数据类型与数据的数据类型不完全相同</strong></li></ul></li></ul><p><img src="https://ws2.sinaimg.cn/large/c44b3fe4gy1g6i1x6kadgj20vp0m2k98.jpg" alt="C#数据类型"></p><p><em>引用类型中</em></p><p>Class，Interface，delegate是定义数据类型的。</p><p>object，String是具体的数据类型。</p><p><em>值类型中</em></p><p>struct，enum是定义数据类型的。</p><p>bool，byte，char…………ulong，ushort 是具体的数据类型。</p><p><strong>变量</strong></p><ol><li>静态变量，</li><li>实例变量（成员变量，字段），</li><li>数组元素，</li><li>值参数，</li><li>引用参数，</li><li>输出形参，</li><li>局部变量</li></ol><p>下面一一举例：</p><p>先定义一个类：</p><p><strong>1:静态变量，</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title">student</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Amount;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>我们再主类中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>       &#123;</span><br><span class="line">           <span class="comment">// 静态成员（变量）</span></span><br><span class="line">             student.Amount </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>2:实例变量（成员变量，字段）</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span>  <span class="title">student</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Amount;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>主类中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">   &#123;</span><br><span class="line">       static void Main(string[] args)</span><br><span class="line">       &#123;</span><br><span class="line">         //实例化</span><br><span class="line">        student s   =  new  student()</span><br><span class="line">//实例变量</span><br><span class="line">           s.age = 9;</span><br><span class="line">           s.name = &quot;xxx&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>3 数组元素，</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line">array[<span class="number">10</span>] = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>4 值参数，7局部变量</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title">student</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Amount;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// double a 属于值参数 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetAdd</span>(<span class="params"><span class="keyword">double</span> a,<span class="keyword">double</span> b</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line"> </span><br><span class="line">          <span class="comment">// double c属于局部变量，位于方法体内</span></span><br><span class="line">          <span class="keyword">double</span> c;</span><br><span class="line">          c = a + b;</span><br><span class="line">          <span class="keyword">return</span> c;</span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>5 引用参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class  student</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">       public static int Amount;</span><br><span class="line">       public int age;</span><br><span class="line">       public string name;</span><br><span class="line">    </span><br><span class="line">    // ref double a 属于引用参数参数 </span><br><span class="line">    </span><br><span class="line">    public double GetAdd(ref double a,double b)</span><br><span class="line">      &#123;</span><br><span class="line"> </span><br><span class="line">          double c;</span><br><span class="line">          c = a + b;</span><br><span class="line">          return c;</span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>6 输出参数</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span>  <span class="title">student</span></span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> Amount;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">string</span> name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// out double a 属于输出参数 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetAdd</span>(<span class="params"><span class="keyword">out</span> <span class="keyword">double</span> a,<span class="keyword">double</span> b</span>)</span></span><br><span class="line"><span class="function"></span>      &#123;</span><br><span class="line"> </span><br><span class="line">          <span class="keyword">double</span> c;</span><br><span class="line">          c = a + b;</span><br><span class="line">          <span class="keyword">return</span> c;</span><br><span class="line">           </span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>那么变量是如何存储在内存中呢？可以分为两种情况，值类型与引用类型.</p><p>在这之前我们需要先了解字节与位 1字节=8位，即 1byte=8bit。假设我们用short举例</p><p>打开MSDN帮助</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4ly1g6y025nzioj20x60didge.jpg" alt="short.png"></p><p>从这可以看到 范围和大小</p><p>（正数最高位0，负数最高位位1）</p><p>因为是有符号位的，所以最大的应该是15个1，转换成10进制则为32,767</p><p>大小16位占了2个字节，可以参考以下图</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4ly1g6y02tu7xxj21gv0ketal.jpg" alt="内存.png"></p><h6 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h6><p>就是我们如果赋值</p><p>short x=1000</p><p>系统先为x开辟一个16位的空间，再将其1000转化为二进制，1111101000</p><p>将其配成16位0000001111101000，然后高对高，低对低，</p><p><img src="http://wx2.sinaimg.cn/large/c44b3fe4gy1g6i3ywm32kj20b40djwep.jpg" alt="内存1"></p><p>这样x变量值就放进内存中。那假如是-1000呢，同样我们先将1000转换二进制</p><p>0000001111101000，然后再<strong>各个位取反，加一</strong>得到</p><p>1111110000011000，这样得到后再分配给内存。得到以下</p><p><img src="http://ws1.sinaimg.cn/large/c44b3fe4gy1g6i41p2xbfj20bt0ejwes.jpg" alt="内存2"></p><h6 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h6><p>引用类型就比较复杂，我们先定义一个类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">student</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">uint</span> ID;</span><br><span class="line">     <span class="keyword">ushort</span> Score;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>我们可以看到 unit 占据4个字节，ushort 2个字节</p><p>在主类中，我们先引用变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">student stu;</span><br></pre></td></tr></table></figure><p>这时候我们需要明白，系统会自动分配给4个字节，每个字节都是0，</p><p><img src="http://ws2.sinaimg.cn/large/c44b3fe4gy1g6i49p1rdjj20by0jvgm5.jpg" alt="内存3"></p><p>然后我们就会实例化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stu = new student();</span><br></pre></td></tr></table></figure><p>这时候我们就会在堆中找到需要的内存，这时候我们真正的存储了uint ID; ushort Score;的值。这时候我们随机赋值给stu.ID ， stu.Score；我们可看到此时的堆内存地址30000001。转换成二进制</p><p>1 1100 1001 1100 0011 1000 0001‬  转换</p><p>00000001 1100 1001 1100 0011 1000 0001‬<br>        高——————低</p><p><img src="http://ws1.sinaimg.cn/large/c44b3fe4gy1g6i5xpd6n0j211j0k9abu.jpg" alt="内存4"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;类（class）与名称空间-namespace&quot;&gt;&lt;a href=&quot;#类（class）与名称空间-namespace&quot; class=&quot;headerlink&quot; title=&quot;类（class）与名称空间(namespace)&quot;&gt;&lt;/a&gt;类（class）与名称空间(na
      
    
    </summary>
    
      <category term="C#" scheme="https://andersen666.github.io.git/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c#数据库相关</title>
    <link href="https://andersen666.github.io.git/2019/08/20/c-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3/"/>
    <id>https://andersen666.github.io.git/2019/08/20/c-数据库相关/</id>
    <published>2019-08-20T14:27:08.000Z</published>
    <updated>2019-08-20T16:30:44.011Z</updated>
    
    <content type="html"><![CDATA[<p>数据库中最常见的就是增删改查，那么在C#中是怎么进行的呢？今天来总结以下</p><p>在这之前，我们需要先了解ADO.NET。</p><p>简单来说，它是在.NET编程环境中使用的数据访问接口。</p><p>关于操作数据主要有五大类</p><ul><li>Connection </li><li>Command</li><li>DataReader</li><li>DataAdapter</li><li>DataSet</li></ul><p>我们可以从下图来看</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g66ispfexbj206j0b3diq.jpg" alt="ADO.NET"></p><p>数据库比作水源；</p><ul><li><p>Connection好比进水笼头,（进行数据库的连接，打开或者关闭）；</p></li><li><p>Command像抽水机（进行数据库的操作，主要操作<strong>增删改</strong>）</p></li><li><p>DataReader,DataAdapter就像输水管，担任着水的传输任务，并起着桥梁的作用(数据库表的读取)</p><blockquote><p>DataAdapter像一根输水管，通过发动机，把水从水源输送到水库里进行保存。<br>DataReader也是一种水管，起着同样的作用。<br>和DataAdapter不同的是，DataReader不把水输送到水库里面，而是单向地直接把水送到需要水的用户那里或田地里，所以要比在水库中转一下（速度）更快。</p></blockquote></li><li><p>DataSet则是一个大水库，把抽上来的水按一定关系的池子进行存放。即使撤掉“抽水装置”（断开连接，离线状态），也可以保持“水”的存在。这也正是ADO.NET的核心。</p></li><li><p>DataTabe则像水库中的每个独立的水池子，分别存放不同种类的水。一个大水库由一个或多个这样的水池子组成。</p><p>（在我理解是DataSet相当于一个虚拟的数据库，DataTabe相当于虚拟的表，只不过是从真正的数据库取来而已）</p></li></ul><p>下面来进行实际操作。不管怎样，我们需要先要在vs中连接数据库；这时候我们就用到了SqlConnection，当然在这之前我们需要先 引用命名空间（类都在这其中）using System.Data.SqlClient;</p><p>我在本地服务器有一个数据库服务器名称 127.0.0.1;数据库名字 test1;用户名 sa 密码xs19940316”</p><p>所以我们就需要实例化对象,连接数据库</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection Conn = <span class="keyword">new</span> SqlConnection(<span class="string">"server=127.0.0.1;database=test1;user=sa;pwd=xs19940316"</span>);</span><br></pre></td></tr></table></figure><p>连接上了数据库，当然是打开数据库</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Conn.open();</span><br></pre></td></tr></table></figure><p>可能会想如果数据库服务器名称或者密码填错呢，肯定会报错的。。假如此时我将数据库名称写错</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g66jec2i9ij20q90a0mya.jpg" alt="wrong"></p><p>所以我们一般会将其写在try catch语句中以便看到报错信息。</p><p>那么正式开始数据库的操作，我们先进行增删改的操作，操作类肯定会想到SqlCommand 。</p><p>我们先查看数据库中students表中的字段与值。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g66jjw6cj5j20as02j0si.jpg" alt="stu"></p><p>首先连接，打开数据库</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection Conn = <span class="keyword">new</span> SqlConnection(<span class="string">"server=127.0.0.1;database=test1;user=sa;pwd=xs19940316"</span>);</span><br></pre></td></tr></table></figure><p><strong>第一种方法</strong></p><p>然后我们需要定义一个字符串来存放操作的语句，以便执行</p><pre><code>string strSql = &quot;INSERT dbo.students SELECT &apos;108&apos;,&apos;5班&apos;,&apos;小明&apos;,&apos;17&apos;,&apos;29&apos;&quot;;SqlCommand Cmd = new SqlCommand(strSql,Conn);</code></pre><p>​            </p><p>   执行数据库操作（ExecuteNonQuery方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cmd.ExecuteNonQuery();</span><br></pre></td></tr></table></figure><p>我们需要注意的是返回的是受影响 的行数int，所以我们可以通过这个值来判定是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int s= Cmd.ExecuteNonQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> if(s==1)</span><br><span class="line"> &#123;</span><br><span class="line">     Console.WriteLine(&quot;sucess&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"> else</span><br><span class="line"> &#123;</span><br><span class="line">     Console.WriteLine(&quot;fail&quot;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>第二种方法</strong></p><p>我们直接创建一个 SqlCommand 具体如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SqlCommand cmd = Conn.CreateCommand();</span><br><span class="line"></span><br><span class="line">cmd.CommandText = &quot;INSERT dbo.students SELECT &apos;178&apos;,&apos;5班&apos;,&apos;小明5&apos;,&apos;175&apos;,&apos;29&apos;&quot;;</span><br></pre></td></tr></table></figure><p>   执行数据库操作（ExecuteNonQuery方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cmd.ExecuteNonQuery();</span><br></pre></td></tr></table></figure><p>以上是增删改的具体方法</p><p><strong>以下介绍查询的方法</strong></p><p>连接创建连接相同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SqlConnection conn = new SqlConnection(&quot;server=.;database=test1;user=sa;pwd=xs19940316&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            conn.Open();</span><br><span class="line"></span><br><span class="line">            string strSql = &quot;select  * from  students&quot;;</span><br><span class="line"></span><br><span class="line">            SqlCommand Cmd = new SqlCommand(strSql, conn);</span><br></pre></td></tr></table></figure><p>然后进行查询操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">SqlDataReader dr;</span><br><span class="line"></span><br><span class="line">dr = Cmd.ExecuteReader();</span><br><span class="line"></span><br><span class="line">while (dr.Read())</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Console.Write(dr[0].ToString() + &quot;,&quot;);</span><br><span class="line">    Console.Write(dr[1].ToString() + &quot;,&quot;);</span><br><span class="line">    Console.Write(dr[2].ToString() + &quot;,&quot;);</span><br><span class="line">    Console.Write(dr[3].ToString() + &quot;,&quot;);</span><br><span class="line">    Console.Write(dr[&quot;stuSex&quot;].ToString() + &quot;,&quot;);</span><br><span class="line">    Console.WriteLine();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在以上我们可以注意到 是    Console.Write();不是    Console.WriteLine();</strong></p><p><strong>而且既可以是索引 dr[3]，也可以是dr[“stuSex”]该字段。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数据库中最常见的就是增删改查，那么在C#中是怎么进行的呢？今天来总结以下&lt;/p&gt;
&lt;p&gt;在这之前，我们需要先了解ADO.NET。&lt;/p&gt;
&lt;p&gt;简单来说，它是在.NET编程环境中使用的数据访问接口。&lt;/p&gt;
&lt;p&gt;关于操作数据主要有五大类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conn
      
    
    </summary>
    
      <category term="C#" scheme="https://andersen666.github.io.git/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>随笔</title>
    <link href="https://andersen666.github.io.git/2019/08/03/%E9%9A%8F%E7%AC%94/"/>
    <id>https://andersen666.github.io.git/2019/08/03/随笔/</id>
    <published>2019-08-02T16:52:25.000Z</published>
    <updated>2019-10-11T07:12:02.182Z</updated>
    
    <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      The article has been encrypted, please enter your password to view.&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://andersen666.github.io.git/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>事务与嵌套事务</title>
    <link href="https://andersen666.github.io.git/2019/07/28/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%B5%8C%E5%A5%97%E4%BA%8B%E5%8A%A1/"/>
    <id>https://andersen666.github.io.git/2019/07/28/事务与嵌套事务/</id>
    <published>2019-07-28T04:50:19.000Z</published>
    <updated>2019-08-03T14:03:57.047Z</updated>
    
    <content type="html"><![CDATA[<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>当我们在银行系统中，我们需要的功能是张三转给李四150元，李四收到张三150元。我们新建账户表Test_Tran，因为在实际情况中，钱数在银行卡内是&gt;0  的,所以添加check约束 Money&gt;0。我们会采用一下语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> Test_Tran <span class="keyword">SET</span> Money=Money<span class="number">-150</span> <span class="keyword">WHERE</span>  <span class="keyword">Id</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">UPDATE</span>  dbo.Test_Tran  <span class="keyword">SET</span> Money=Money+<span class="number">150</span> <span class="keyword">WHERE</span>  <span class="keyword">Id</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>但事实如果A卡内没有150元，更新就会失败，但是第二个会更新成功,导致银行亏本。。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fnbazluyj210a04ot8w.jpg" alt></p><p>所以我们想让这两句话作为一个整体来执行，要么都成功，要么都失败<br>        所以采用事务原理，引出事务的概念</p><h5 id="事务（Transaction）是并发控制的基本单位。"><a href="#事务（Transaction）是并发控制的基本单位。" class="headerlink" title="事务（Transaction）是并发控制的基本单位。"></a>事务（Transaction）是并发控制的基本单位。</h5><h6 id="特性：-ACID"><a href="#特性：-ACID" class="headerlink" title="特性：(ACID)"></a>特性：(ACID)</h6><ul><li>Atomic（原子性）：事务中包含的操作被看做一个逻辑单元，这个逻辑单元中的操作要么全部成功，要么全部失败。</li><li>Consistency（一致性）：只有合法的数据可以被写入数据库，否则事务应该将其回滚到最初状态,类似于约束 。</li><li>Isolation（隔离性）：事务允许多个用户对同一个数据进行并发访问，而不破坏数据的正确性和完整性。同时，并行事务的修改必须与其他并行事务的修改相互独立。</li><li>Durability（持久性）：事务结束后，事务处理的结果必须能够得到固化。</li></ul><p>对于<strong>隔离性</strong>我们可以举例</p><p>如果我们想删除一张表，利用事务，假设我们在一个查询窗口执行下面命令</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fnbta9vxj20ds04rweg.jpg" alt></p><p>我们需要知道此时事务还没有完成，如果我们在另一个窗口 直接查询该表，则会出现下面情况：</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fncagq39j20ai0173ya.jpg" alt></p><p>执行所花时间一直在增长，没有结果，也没有消息。此时这个进程在等待另一个进程操作完成。 </p><p>一旦我在第一个 SSMS 执行ROLLBACK后，就会很快可以查询到，这就是隔离性。</p><h6 id="事务基本语句"><a href="#事务基本语句" class="headerlink" title="事务基本语句"></a>事务基本语句</h6><p>开始事物：BEGIN TRANSACTION </p><p>提交事物：COMMIT TRANSACTION </p><p>回滚事务：ROLLBACK TRANSACTION </p><p>保存事务  SAVE TRANSACTION </p><p>我们此时回到最初想要的功能，张三转账150给李四，李四收到张三，我们可以采用以下事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>  TRAN  <span class="keyword">TEST</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">Errors</span> <span class="built_in">INT</span> </span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">Errors</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">UPDATE</span> Test_Tran  <span class="keyword">SET</span> Money=Money<span class="number">-150</span> <span class="keyword">WHERE</span>  <span class="keyword">Id</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">Errors</span>=@@<span class="keyword">ERROR</span>+@<span class="keyword">Errors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Test_Tran  <span class="keyword">SET</span> Money=Money+<span class="number">150</span> <span class="keyword">WHERE</span>  <span class="keyword">Id</span>=<span class="number">2</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">Errors</span>=@@<span class="keyword">ERROR</span>+@<span class="keyword">Errors</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span>  @<span class="keyword">Errors</span> &lt;&gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">PRINT <span class="string">'FAIL'</span></span><br><span class="line"><span class="keyword">ROLLBACK</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ELSE</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">PRINT <span class="string">'SUCESS'</span></span><br><span class="line"><span class="keyword">COMMIT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>如果此时张三账户中没有150元可以转账给李四，则会报错</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fncpw1gfj211e06o0t0.jpg" alt></p><p>这样我们就完成了事务的基本操作。</p><h4 id="嵌套事务"><a href="#嵌套事务" class="headerlink" title="嵌套事务"></a>嵌套事务</h4><p>在这之前我们需要先了解 @@TRANCOUNT <a href="https://docs.microsoft.com/zh-cn/sql/t-sql/functions/trancount-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">官方文档 </a>。得出基本的结论如下</p><p>BEGIN TRANSACTION 语句将 @@TRANCOUNT 增加 1。</p><p>COMMIT TRANSACTION 将 @@TRANCOUNT 递减 1。</p><p> ROLLBACK TRANSACTION 将 @@TRANCOUNT 递减到 0。</p><p>*<em>ROLLBACK TRANSACTION savepoint_name 除外它不影响 @@TRANCOUNT *</em> </p><p>我们可与通过一下来进行验证，先看<em>提交事务操作</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRAN A</span><br><span class="line">PRINT <span class="string">'开始A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN B</span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'开始B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">       <span class="keyword">INSERT</span>  dbo.test <span class="keyword">SELECT</span> <span class="number">7</span>,<span class="number">7</span>,<span class="string">'G'</span></span><br><span class="line"> <span class="keyword">COMMIT</span> </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'提交A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">COMMIT</span> </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'提交B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><p>这是最简单的提交事务，不包含回滚等，可以得出结果</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fndcritdj20bn04rdg1.jpg" alt></p><p>再看<em>回滚事务操作</em>，这里ROLLBACK  这里就会分两种情况   在外部和内部</p><p>当在<strong>外部</strong>时候我们可以来例证</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN A</span><br><span class="line">PRINT <span class="string">'开始A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN B</span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'开始B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">       <span class="keyword">INSERT</span>  dbo.test <span class="keyword">SELECT</span> <span class="number">8</span>,<span class="number">8</span>,<span class="string">'G'</span></span><br><span class="line"> <span class="keyword">COMMIT</span> </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'提交A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">ROLLBACK</span> </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'回滚B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><p>这里外部已经回滚，但是我们需要理解的是，<strong>当外部回滚，内部的也会回滚，纵使内部已经提交</strong></p><p>我们可以通过查询test 表来验证这一点</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fne6e6k5j20c0089jr8.jpg" alt></p><p>当在<strong>内部</strong>时候我们也可以来例证</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN A</span><br><span class="line">PRINT <span class="string">'开始A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN B</span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'开始B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">       <span class="keyword">INSERT</span>  dbo.test <span class="keyword">SELECT</span> <span class="number">8</span>,<span class="number">8</span>,<span class="string">'G'</span></span><br><span class="line"> <span class="keyword">ROLLBACK</span>  </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'回滚A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">COMMIT</span> </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'提交B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fneojfiaj20l407m3z2.jpg" alt></p><p>这是我们可以得出结论 在内部是无法rollback 的，因为会直接将其归0，然而commit会减1，再次commit就会出现0-1=-1值，但是@@TRANCOUNT是不允许的。从而报错。</p><p>但是我们想回滚内部事务么办？这时候就需要 save 让其返回一个保存点。</p><p>但是需要注意的是 这样返回的@@TRANCOUNT值是不变的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">--测试返回点</span></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN A</span><br><span class="line">PRINT <span class="string">'开始A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span> TRAN B</span><br><span class="line"></span><br><span class="line"><span class="keyword">SAVE</span> TRAN B_SAVE</span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'开始B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">       <span class="keyword">INSERT</span>  dbo.test <span class="keyword">SELECT</span> <span class="number">8</span>,<span class="number">8</span>,<span class="string">'G'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span> TRAN   B_SAVE</span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'回滚A事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br><span class="line"><span class="keyword">COMMIT</span> </span><br><span class="line"></span><br><span class="line">PRINT <span class="string">'提交B事务@@TRANCOUNT全局变量值是'</span> + <span class="keyword">CAST</span>(@@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>))</span><br></pre></td></tr></table></figure><p>我们直接看结果</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fnf6he33j20e90633yr.jpg" alt></p><p>这时候我们查看表格也  生成该语句<code>INSERT  dbo.test SELECT 8,8,&#39;G&#39;</code>，看似没有问题，但是我们需要注意的一个问题是最后提交事务后全局 @@TRANCOUNT值=1 这是有问题的，说明还是有事务在系统中，这样我们在关闭窗口会提示</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fnfjxtzxj20pe05t74b.jpg" alt></p><p>这个我们暂时不考虑，后面会说到。起码来说，我们达到了回滚内部事务的目的。</p><p>实际情况中，我们经常遇到的是父存储过程调用子存储过程，而且父，子存储过程都存在事务<br> 我们可以用以下举例，test表中，我们限制id列为主键。</p><ul><li><p>内部存储过程主要用于插入值，并返回一个值给外部 </p></li><li><p>外部存储过程则通过传进来的值正确则插入，不正确则回滚</p><p>我们先看 <em>外部存储过程</em></p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> [test1]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">/****** Object:  StoredProcedure [dbo].[outertran]    Script Date: 2019-07-28 10:11:48 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[outertran]</span><br><span class="line">    @<span class="keyword">ID</span> <span class="built_in">BIGINT</span>,</span><br><span class="line">    @UserID <span class="built_in">BIGINT</span>,</span><br><span class="line">    @<span class="keyword">Name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">DECLARE</span> @TRANCOUNT <span class="built_in">int</span>=(<span class="keyword">select</span> @@TRANCOUNT)</span><br><span class="line">    PRINT <span class="string">'未进入父事务前全局@@TRANCOUNT:'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">BEGIN</span> TRAN </span><br><span class="line">    <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT) </span><br><span class="line">    PRINT <span class="string">'进入父事务后全局@@TRANCOUNT:'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">DECLARE</span> @<span class="keyword">result</span> <span class="built_in">INT</span></span><br><span class="line"></span><br><span class="line">    EXEC @<span class="keyword">result</span> = innertran @<span class="keyword">ID</span> = @<span class="keyword">ID</span>, @UserID = @UserID, @<span class="keyword">Name</span> =@<span class="keyword">Name</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">IF</span> ( @<span class="keyword">result</span> &lt;= <span class="number">0</span> ) </span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">            <span class="keyword">ROLLBACK</span> TRAN  ;</span><br><span class="line">            <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT) </span><br><span class="line">            PRINT <span class="string">'回滚父事务后全局@@TRANCOUNT:'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)) </span><br><span class="line">                        </span><br><span class="line">            <span class="keyword">RETURN</span> ;</span><br><span class="line">        <span class="keyword">END</span> </span><br><span class="line">    <span class="keyword">COMMIT</span> TRAN </span><br><span class="line">    <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT) </span><br><span class="line">    PRINT <span class="string">'提交父事务后全局@@TRANCOUNT:'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))</span><br></pre></td></tr></table></figure><p> 再看 <em>内部存储过程</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> [test1]</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">/****** Object:  StoredProcedure [dbo].[innertran]    Script Date: 2019-07-28 14:29:03 ******/</span></span><br><span class="line"><span class="keyword">SET</span> ANSI_NULLS <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SET</span> QUOTED_IDENTIFIER <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">--内层事务存储过程，演示如何处理才能在嵌套的事务存储过程中正确处理事务</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> [dbo].[innertran]</span><br><span class="line">    @<span class="keyword">ID</span> <span class="built_in">BIGINT</span> ,</span><br><span class="line">    @UserID <span class="built_in">BIGINT</span> ,</span><br><span class="line">    @<span class="keyword">Name</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> @TRANCOUNT <span class="built_in">int</span>=(<span class="keyword">select</span> @@TRANCOUNT)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">SET</span> XACT_ABORT <span class="keyword">ON</span></span><br><span class="line">        <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)</span><br><span class="line">        PRINT <span class="string">'未进入子事务前全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))    </span><br><span class="line">        <span class="keyword">BEGIN</span> TRAN tran1      <span class="comment">--开始事务 </span></span><br><span class="line">       <span class="comment">--SAVE TRAN tranpoint   --保存事务点</span></span><br><span class="line">        <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)</span><br><span class="line">        PRINT <span class="string">'进入子事务后全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))    </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">IF</span>(<span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TOP <span class="number">1</span> * <span class="keyword">FROM</span> dbo.test <span class="keyword">WHERE</span> <span class="keyword">ID</span>=@<span class="keyword">ID</span>))    </span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">ROLLBACK</span> TRAN </span><br><span class="line">                <span class="comment">--ROLLBACK TRAN tranpoint ;   --回滚保存点的事务   </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)  </span><br><span class="line">                PRINT <span class="string">'只是回滚子事务后全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))  </span><br><span class="line"><span class="comment">--最好办法就是保存该事务，提交该事务</span></span><br><span class="line">                <span class="comment">--COMMIT TRAN tran1 ;            --提示当前事务</span></span><br><span class="line">  <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)  </span><br><span class="line">                PRINT <span class="string">'回滚子事务提交后全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))    </span><br><span class="line">                <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)  </span><br><span class="line">                PRINT <span class="string">'回滚子事务后全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))     </span><br><span class="line">                          </span><br><span class="line">                <span class="keyword">RETURN</span> <span class="number">0</span> ;  </span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">--插表开始</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">INSERT</span>  dbo.test</span><br><span class="line">                ( <span class="keyword">ID</span>, UserID, <span class="keyword">Name</span>)</span><br><span class="line">        <span class="keyword">VALUES</span>  ( @<span class="keyword">ID</span>, </span><br><span class="line">                  @UserID,</span><br><span class="line">                  @<span class="keyword">Name</span>  </span><br><span class="line">                  )</span><br><span class="line">        <span class="comment">--插表结束</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">IF</span> @@<span class="keyword">error</span> &lt;&gt; <span class="number">0</span> </span><br><span class="line">            <span class="keyword">BEGIN</span>  </span><br><span class="line">                <span class="keyword">ROLLBACK</span> TRAN tranpoint ; <span class="comment">--回滚保存点的事务   </span></span><br><span class="line">                <span class="keyword">COMMIT</span> TRAN tran1 ;          <span class="comment">--提示当前事务  </span></span><br><span class="line">                <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)  </span><br><span class="line">                PRINT <span class="string">'回滚子事务后全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))     </span><br><span class="line">                                         </span><br><span class="line">                <span class="keyword">RETURN</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="keyword">END</span>        </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">COMMIT</span> TRAN tran1 ;    </span><br><span class="line">        <span class="keyword">SET</span> XACT_ABORT <span class="keyword">OFF</span>;    </span><br><span class="line">        <span class="keyword">SET</span> @TRANCOUNT=(<span class="keyword">select</span> @@TRANCOUNT)  </span><br><span class="line">        PRINT <span class="string">'提交子事务后全局@@TRANCOUNT'</span>+<span class="keyword">CAST</span>(@TRANCOUNT <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>))</span><br><span class="line">           </span><br><span class="line">        <span class="keyword">RETURN</span> <span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>我们可以看到 当我们传进来3个值 @ID, @UserID,@Name   后 进入事务开始执行内部存储过程。</p><p>在进行内部存储过程执行中，我们先判定这个表中是否有相同的Id，因为我们采用id为主键,如果有则回滚事务，返回0 给外部存储过程。没有返回1给外部存储过程。</p><p>简化内存储过程判断主键插入是否相同code</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">If EXISTS(<span class="keyword">SELECT</span> TOP <span class="number">1</span> * <span class="keyword">FROM</span> dbo.test <span class="keyword">WHERE</span> <span class="keyword">ID</span>=@<span class="keyword">ID</span>))    </span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">ROLLBACK</span> TRAN </span><br><span class="line">                <span class="keyword">RETURN</span> <span class="number">0</span> ;  </span><br><span class="line">        <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>我们来进行实际的正常插表操作（插入表中未插入的id）</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fng0cxt4j20f607ljrp.jpg" alt></p><p>正常是可以走通 的， 但是当我们想实验如果插入一次重复的主键id，实验是否会回滚。</p><p>but。。。。。</p><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fnge5dcdj20rb092my6.jpg" alt></p><p>我们可以观察@@TRANCOUNT在进入子存储过程开启事务后，直接内部ROOLBACK,@@TRANCOUNT,直接归0.当前会报错,类似上面的AB事务的例子。</p><p>*<em>所以这时我们理所想到 save *</em></p><p>我们就会修改一下内存储过程代码（简化）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">BEGIN</span> TRAN tran1      <span class="comment">--开始事务 </span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">SAVE</span> TRAN tranpoint   <span class="comment">--保存事务点</span></span><br><span class="line"></span><br><span class="line">………..代码……….</span><br><span class="line"></span><br><span class="line">      <span class="keyword">IF</span>(<span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TOP <span class="number">1</span> * <span class="keyword">FROM</span> dbo.test <span class="keyword">WHERE</span> <span class="keyword">ID</span>=@<span class="keyword">ID</span>))    </span><br><span class="line"></span><br><span class="line">       <span class="keyword">BEGIN</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">               <span class="keyword">ROLLBACK</span> TRAN tranpoint ;   <span class="comment">--回滚保存点的事务   </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">             RETURN 0 ;  </span><br><span class="line">       <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>but。。。。。<img src="!%5B%5D(http://ww1.sinaimg.cn/large/c44b3fe4gy1g5mu8y8w16j20t3088n0f.jpg)" alt="loading"></p><p>好消息是报错减少一个，再次观察，我们虽然保存了返回点，但是没有注意到  ROOLBACK返回值 @@TRANCOUNT值是不变化的。所以可以看到的 再回滚子事务后  @@TRANCOUNT依旧是2，</p><p>但是明明 在父事务中当时begin 是  @@TRANCOUNT是1 这样，但是你进入了一个子存储变2了，应该是0呀，sql就会报错。</p><p><strong>理所当然我们第一时间想到的是，既然ROOLBACK返回保存点不变话，当然，再将其提交不就ok</strong></p><p>再次修改代码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">BEGIN</span> TRAN tran1      <span class="comment">--开始事务 </span></span><br><span class="line">       <span class="keyword">SAVE</span> TRAN tranpoint   <span class="comment">--保存事务点</span></span><br><span class="line">………..代码……….</span><br><span class="line"></span><br><span class="line"> <span class="keyword">IF</span>(<span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> TOP <span class="number">1</span> * <span class="keyword">FROM</span> dbo.test <span class="keyword">WHERE</span> <span class="keyword">ID</span>=@<span class="keyword">ID</span>))    </span><br><span class="line">        <span class="keyword">BEGIN</span></span><br><span class="line">                <span class="keyword">ROLLBACK</span> TRAN tranpoint ;   <span class="comment">--回滚保存点的事务   </span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">COMMIT</span> TRAN tran1 ;            <span class="comment">--提示当前事务</span></span><br><span class="line">                          </span><br><span class="line">                RETURN 0 ;  </span><br><span class="line">        <span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/c44b3fe4gy1g5fngtwwewj20jf06umxo.jpg" alt></p><p>well done </p><p>这是完全正确状态。我们可以看一个关键点，，就是进入子事务后只是回滚还是2，但是回滚后提交便是1，所以想到的就是先提交内部事务</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h4&gt;&lt;p&gt;当我们在银行系统中，我们需要的功能是张三转给李四150元，李四收到张三150元。我们新建账户表Test_Tran，因为在实际情况中，钱数在银
      
    
    </summary>
    
      <category term="SQL SERVER" scheme="https://andersen666.github.io.git/categories/SQL-SERVER/"/>
    
    
  </entry>
  
  <entry>
    <title>博客更新日志及踩坑记录</title>
    <link href="https://andersen666.github.io.git/2019/07/17/blog-update/"/>
    <id>https://andersen666.github.io.git/2019/07/17/blog-update/</id>
    <published>2019-07-17T10:52:25.000Z</published>
    <updated>2019-07-19T23:29:38.155Z</updated>
    
    <content type="html"><![CDATA[<h4 id="博客更新日志及踩坑记录"><a href="#博客更新日志及踩坑记录" class="headerlink" title="博客更新日志及踩坑记录"></a>博客更新日志及踩坑记录</h4><h5 id="博客更新日志"><a href="#博客更新日志" class="headerlink" title="博客更新日志"></a>博客更新日志</h5><p><strong>2019-7-15</strong>  完成github+nexo基本搭建</p><p><strong>2019-7-16</strong>  完成next主题的更换与美化</p><p><strong>2019-7-17</strong>  完成博客后期的调整等</p><p><strong>2019-7-18</strong> 添加来必力评论系统</p><h5 id="踩坑记录"><a href="#踩坑记录" class="headerlink" title="踩坑记录"></a>踩坑记录</h5><ul><li>我们需要注意的是，每个关键字冒号后需要空格，例如 categories: 博客相关   categories:后需要空格，否则在 hexo s 后无法进行预览</li></ul><ul><li>在域名与github绑定后首次没有问题，但是当更新博客内容，hexo d后就会出现域名丢失，这时候我们无法通过域名进入博客，只能通过<a href="mailto:yourname@github.io" target="_blank" rel="noopener">yourname@github.io</a> 进入博客，这是因为每次在hexo d 就会更新就会将CNAME值更新删除，所以我们可以在本地用sublime在source文件夹下方新建自己域名值 ，例如 xushang.xyz 保存为全部文件。</li></ul><p><em>未完待续</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;博客更新日志及踩坑记录&quot;&gt;&lt;a href=&quot;#博客更新日志及踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;博客更新日志及踩坑记录&quot;&gt;&lt;/a&gt;博客更新日志及踩坑记录&lt;/h4&gt;&lt;h5 id=&quot;博客更新日志&quot;&gt;&lt;a href=&quot;#博客更新日志&quot; cla
      
    
    </summary>
    
      <category term="博客相关" scheme="https://andersen666.github.io.git/categories/%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/"/>
    
    
  </entry>
  
</feed>
